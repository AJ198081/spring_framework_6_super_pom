server.port=8081

spring.application.name=auth-client

# Where is the Auth Server provider located, if implements /.well-known interfaces OIDC specs then this is all you need
spring.security.oauth2.client.provider.oidc-provider.issuer-uri=http://localhost:9000

# Register this client with the Auth Server provider, read like client -> registration -> with oidc-provider
spring.security.oauth2.client.registration.oidc-provider.client-name=oidc-client
spring.security.oauth2.client.registration.oidc-provider.client-id=oidc-client
spring.security.oauth2.client.registration.oidc-provider.client-secret=secret
spring.security.oauth2.client.registration.oidc-provider.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.oidc-provider.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.oidc-provider.redirect-uri=http://localhost:8081/login/oauth2/oidc-provider/code
spring.security.oauth2.client.registration.oidc-provider.redirect-uri={baseUrl}/beers
#spring.security.oauth2.client.registration.oidc-client.redirect-uri={baseUrl}/beers
spring.security.oauth2.client.registration.oidc-provider.scope=openid,message:read

logging.level.org.springframework.security=trace
logging.level.reactor.netty=trace
logging.level.org.springframework.cloud.gateway=trace
logging.level.org.springframework.http.server.reactive=trace

spring.cloud.gateway.httpserver.wiretap=true
spring.cloud.gateway.httpclient.wiretap=true












